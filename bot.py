import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

# =================== –ö–û–ù–§–ò–ì ===================
BOT_TOKEN = "7844584704:AAF6I6-SozsE7xJnrhbm4qWsoq6_huRn2jw"

# =================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===================
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# =================== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===================
logging.basicConfig(level=logging.INFO)

# =================== –ö–û–ú–ê–ù–î–´ ===================

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    kb = [
        [types.KeyboardButton(text="üìã –í—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã")],
        [types.KeyboardButton(text="üéØ –≠–∫—Å–ø—Ä–µ—Å—Å –¥–Ω—è")],
        [types.KeyboardButton(text="üèÜ –¢–æ–ø–æ–≤—ã–µ –æ–¥–∏–Ω–æ—á–Ω—ã–µ")],
        [types.KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å")]
    ]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    await message.answer("üìÖ *–§–£–¢–ë–û–õ–¨–ù–´–ï –ü–†–û–ì–ù–û–ó–´*\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard, parse_mode="Markdown")

@dp.message(lambda message: message.text == "üìã –í—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã")
async def all_predictions(message: types.Message):
    await message.answer("*üìã –í–°–ï –ü–†–û–ì–ù–û–ó–´ –ù–ê –°–ï–ì–û–î–ù–Ø*\n\n[–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Ç—á–∏...]\n\n*–ñ–¥–∏—Ç–µ ‚Äî –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è.*", parse_mode="Markdown")

@dp.message(lambda message: message.text == "üéØ –≠–∫—Å–ø—Ä–µ—Å—Å –¥–Ω—è")
async def express_day(message: types.Message):
    await message.answer("*üéØ –≠–ö–°–ü–†–ï–°–° –î–ù–Ø*\n\n[–ü–æ–¥–±–∏—Ä–∞–µ–º —Å–∞–º—ã–µ –Ω–∞–¥—ë–∂–Ω—ã–µ –∏—Å—Ö–æ–¥—ã...]\n\n*–ñ–¥–∏—Ç–µ ‚Äî —ç–∫—Å–ø—Ä–µ—Å—Å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è.*", parse_mode="Markdown")

@dp.message(lambda message: message.text == "üèÜ –¢–æ–ø–æ–≤—ã–µ –æ–¥–∏–Ω–æ—á–Ω—ã–µ")
async def top_singles(message: types.Message):
    await message.answer("*üèÜ –¢–û–ü–û–í–´–ï –û–î–ò–ù–û–ß–ù–´–ï*\n\n[–í—ã–±–∏—Ä–∞–µ–º —Å–∞–º—ã–µ –ø—Ä–æ—Ö–æ–¥–∏–º—ã–µ —Å—Ç–∞–≤–∫–∏...]\n\n*–ñ–¥–∏—Ç–µ ‚Äî —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤–∏—Ç—Å—è.*", parse_mode="Markdown")

@dp.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å")
async def daily_stats(message: types.Message):
    await message.answer("*üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ó–ê –î–ï–ù–¨*\n\n[–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π...]\n\n*–ñ–¥–∏—Ç–µ ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è.*", parse_mode="Markdown")

# =================== –ó–ê–ü–£–°–ö ===================

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
